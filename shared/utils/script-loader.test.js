const script_loader = require("./script-loader")
// @ponicode
describe("script_loader.scriptLoader", () => {
    test("0", () => {
        let object = ["Edmond", ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], "George"]
        let object2 = [["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], "Pierre Edouard", ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"]]
        let object3 = [["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"]]
        let param1 = [object, object2, object3]
        let callFunction = () => {
            script_loader.scriptLoader(param1)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("1", () => {
        let object = ["Michael", "Edmond", ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"]]
        let object2 = [["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], "Jean-Philippe"]
        let object3 = [["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"]]
        let param1 = [object, object2, object3]
        let callFunction = () => {
            script_loader.scriptLoader(param1)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("2", () => {
        let object = [["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"]]
        let object2 = [["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"]]
        let param1 = [object, ["Anas", "Michael", "Pierre Edouard"], object2]
        let callFunction = () => {
            script_loader.scriptLoader(param1)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("3", () => {
        let object = [["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"]]
        let object2 = ["Jean-Philippe", ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"]]
        let object3 = [["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], "Jean-Philippe", ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"]]
        let param1 = [object, object2, object3]
        let callFunction = () => {
            script_loader.scriptLoader(param1)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("4", () => {
        let object = [["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"]]
        let object2 = [["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], "Pierre Edouard", "Jean-Philippe"]
        let object3 = ["Pierre Edouard", ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"], ["\n      for (i=0; i < document.images.length; i++) {\n        if ((document.images[i].naturalWidth != 0) &&\n            (document.images[i].naturalHeight != 0)) {\n          window.domAutomationController.send(true);\n        }\n      }\n      window.domAutomationController.send(false);\n    ", "if 1:\n            import sys, os, time, threading\n\n            # a thread, which waits for the main program to terminate\n            def joiningfunc(mainthread):\n                mainthread.join()\n                print 'end of thread'\n        \n", "if 1:\n            childpid = os.fork()\n            if childpid != 0:\n                os.waitpid(childpid, 0)\n                sys.exit(0)\n\n            t = threading.Thread(target=joiningfunc,\n                                 args=(threading.current_thread(),))\n            t.start()\n            print 'end of main'\n            ", "\n    var editor = tinyMCE.activeEditor;\n    editor.selection.select(editor.dom.select('a')[0]);", "\nfunction Invoke-Something {\n\n}\nInvoke-Something"]]
        let param1 = [object, object2, object3]
        let callFunction = () => {
            script_loader.scriptLoader(param1)
        }
    
        expect(callFunction).not.toThrow()
    })

    test("5", () => {
        let callFunction = () => {
            script_loader.scriptLoader(undefined)
        }
    
        expect(callFunction).not.toThrow()
    })
})
